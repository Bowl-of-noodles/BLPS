@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Ad {
  + getWeight(): Double
  + getId(): Long
  + setPhone(String): void
  + getOwner(): Long
  + getPrice(): Long
  + getCategory(): String
  + getPhone(): String
  + setCategory(String): void
  + getRank(): Double
  + setId(Long): void
  + setRank(Double): void
  + setOwner(Long): void
  + setPrice(Long): void
  + setWeight(Double): void
  + toString(): String
}
class AdDTO {
  + getPrice(): Long
  + getWeight(): Double
  + getCategory(): String
  + getPhone(): String
  + setPrice(Long): void
  + setWeight(Double): void
  + setCategory(String): void
  + setPhone(String): void
  + toString(): String
}
interface AdsRepository << interface >> {
  + findAllByPriceBetweenAndWeightAndCategory(Long, Long, Double, String): List<Ad>
  + deleteAllByOwner(Long): void
  + findAllByOwner(Long): List<Ad>
}
interface AdsService << interface >> {
  + rank(Long, RankDTO): MessageDTO
  + getById(Long): Ad
  + save(Ad): void
  + findAdsByFilter(Long, Long, Double, String): List<Ad>
  + findMyAds(Long): List<Ad>
  + deleteAllByOwner(Long): void
  + createAd(AdDTO, Long): Ad
}
class AdsServiceImpl {
  + save(Ad): void
  + getById(Long): Ad
  + rank(Long, RankDTO): MessageDTO
  + findMyAds(Long): List<Ad>
  + createAd(AdDTO, Long): Ad
  + deleteAllByOwner(Long): void
  + findAdsByFilter(Long, Long, Double, String): List<Ad>
  - rank(Ad, Double): MessageDTO
}
class AuthorizationController {
  + authUser(CustomerDTO): ResponseEntity<?>
  + registerUser(CustomerDTO): ResponseEntity<?>
}
class AuthorizationService {
  + authUser(CustomerDTO): Customer
  + registerUser(CustomerDTO): Customer
}
class CustomAuthorityGranter {
  + grant(Principal): Set<String>
}
class CustomUserDetails {
  + isEnabled(): boolean
  + build(Customer): CustomUserDetails
  + isAccountNonLocked(): boolean
  + isCredentialsNonExpired(): boolean
  + isAccountNonExpired(): boolean
  + getAuthorities(): Collection<GrantedAuthority>
  + getPassword(): String
  + getUsername(): String
}
class CustomUserDetailsService {
  + loadUserByUsername(String): UserDetails
}
class Customer {
  + getPassword(): String
  + getId(): Long
  + getUserName(): String
  + getRole(): Role
  + getKarmaNegative(): int
  + setKarmaNegative(int): void
  + setBanned(boolean): void
  + setRole(Role): void
  + setFavAds(List<FavAdRow>): void
  + toString(): String
  + isBanned(): boolean
  + getFavAds(): List<FavAdRow>
  + setId(Long): void
  + setUserName(String): void
  + setPassword(String): void
  + hashCode(): int
  + incNegative(): void
  + equals(Object): boolean
}
class CustomerDTO {
  + getName(): String
  + getPassword(): String
  + setName(String): void
  + setPassword(String): void
  + toString(): String
}
interface CustomerRepository << interface >> {
  + findRoleByName(String): Role
  + login(String, String): Optional<Customer>
  + findByUserNameAndPassword(String, String): Optional<Customer>
  + findAllByRoleName(RoleName): List<Customer>
  + findByUserName(String): Optional<Customer>
  + findCustomerById(Long): List<Customer>
}
interface CustomerService << interface >> {
  + complaint(HttpServletRequest, Long): String
  + whoIsAdmin(HttpServletRequest): Optional<Customer>
  + delFromFav(HttpServletRequest, Long): MessageDTO
  + customerInfo(Customer): FullCustomerDTO
  + findByToken(String): String
  + findAll(): List<Customer>
  + deleteMe(HttpServletRequest): void
  + whoIs(HttpServletRequest): Optional<Customer>
  + showFav(HttpServletRequest): List<Ad>
  + save(Customer): void
  + addToFav(HttpServletRequest, Long): MessageDTO
  + findById(Long): Customer
}
class CustomerServiceImpl {
  + whoIsAdmin(HttpServletRequest): Optional<Customer>
  + findById(Long): Customer
  + showFav(HttpServletRequest): List<Ad>
  + save(Customer): void
  + customerInfo(Customer): FullCustomerDTO
  + whoIs(HttpServletRequest): Optional<Customer>
  + delFromFav(HttpServletRequest, Long): MessageDTO
  - complaint(Customer): String
  + findAll(): List<Customer>
  + complaint(HttpServletRequest, Long): String
  + addToFav(HttpServletRequest, Long): MessageDTO
  + deleteMe(HttpServletRequest): void
  + findByToken(String): String
}
class DelegatedAuthenticationEntryPoint {
  + commence(HttpServletRequest, HttpServletResponse, AuthenticationException): void
}
class ExceptionAPIHandler {
  - doModel(HttpStatus, String): Map<Object, Object>
  # Authorize(NoAuthorityException): ResponseEntity<Object>
  + handleAuthenticationException(Exception): ResponseEntity<NoAuthorityException>
}
class ExceptionDTO {
  + getStatus(): Integer
  + getExceptionInfo(): String
  + setStatus(Integer): void
  + setExceptionInfo(String): void
  + toString(): String
}
class FavAdRow {
  + getId(): long
  + getAd(): Ad
  + getCustomer(): Customer
  + setId(long): void
  + setAd(Ad): void
  + setCustomer(Customer): void
}
interface FavAdRowRepository << interface >> {
  + findByCustomer(Customer): List<FavAdRow>
}
class FullCustomerDTO {
  + getId(): Long
  + getUserName(): String
  + getPassword(): String
  + getRole(): RoleName
  + getKarmaNegative(): int
  + isBanned(): boolean
  + setId(Long): void
  + setUserName(String): void
  + toString(): String
  + setPassword(String): void
  + setRole(RoleName): void
  + setKarmaNegative(int): void
  + setBanned(boolean): void
}
class JaasConfig {
  + configuration(CustomerRepository): InMemoryConfiguration
  + jaasAuthenticationProvider(Configuration): AbstractJaasAuthenticationProvider
}
class JaasLoginModule {
  + abort(): boolean
  + login(): boolean
  + initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>): void
  + commit(): boolean
  + logout(): boolean
}
class JwtFilter {
  # doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain): void
  - getTokenFromRequest(HttpServletRequest): Optional<String>
}
class JwtUtil {
  + checkToken(String): boolean
  + usernameFromToken(String): String
  + generateToken(String): String
}
class MessageDTO {
  + getMessage(): String
  + setMessage(String): void
  + toString(): String
}
class NoAuthorityException
class Offer {
  + getCustomer(): Customer
  + getId(): Long
  + getCreationDate(): LocalDate
  + getAd(): Ad
  + toString(): String
  + getPrice(): Long
  + getStatus(): StatusName
  + setStatus(StatusName): void
  + setId(Long): void
  + setCreationDate(LocalDate): void
  + setCustomer(Customer): void
  + setAd(Ad): void
  + setPrice(Long): void
}
class OfferDTO {
  + getCreationDate(): LocalDate
  + getId(): Long
  + getCustomerId(): Long
  + getAdId(): Long
  + getPrice(): Long
  + getStatus(): StatusName
  + setId(Long): void
  + setCreationDate(LocalDate): void
  + setCustomerId(Long): void
  + setStatus(StatusName): void
  + setAdId(Long): void
  + setPrice(Long): void
  + toString(): String
}
interface OfferRepository << interface >> {
  + findAllByStatus(StatusName): List<Offer>
  + findAllByCustomer(Customer): List<Offer>
}
interface OfferService << interface >> {
  + createOffer(Customer, Long): OfferDTO
  + findAllByStatus(StatusDTO): List<OfferDTO>
  + getOffer(Long): OfferDTO
  + save(Offer): void
  + delete(Offer): void
  + findAllByCustomer(Customer): List<OfferDTO>
  + changeOfferStatus(Long, StatusDTO): MessageDTO
}
class OfferServiceImpl {
  + delete(Offer): void
  + changeOfferStatus(Long, StatusDTO): MessageDTO
  + save(Offer): void
  + findAllByStatus(StatusDTO): List<OfferDTO>
  + findAllByCustomer(Customer): List<OfferDTO>
  - getOfferDTO(Offer): OfferDTO
  + getOffer(Long): OfferDTO
  + createOffer(Customer, Long): OfferDTO
}
class RankDTO {
  + getRank(): Double
  + setRank(Double): void
  + toString(): String
}
annotation RequestMapping << annotation >> {
  + method(): RequestMethod[]
  + produces(): String[]
  + value(): String[]
  + name(): String
  + path(): String[]
  + consumes(): String[]
  + headers(): String[]
  + params(): String[]
}
annotation RestController << annotation >> {
  + value(): String
}
class Role {
  + getId(): Long
  + getName(): RoleName
  + setId(Long): void
  + setName(RoleName): void
  + toString(): String
  + getAuthority(): String
}
enum RoleName << enumeration >> {
  + values(): RoleName[]
  + valueOf(String): RoleName
}
interface RoleRepository << interface >> {
  + findByName(RoleName): Role
}
class SpringSecurityForARestApiApplication {
  + main(String[]): void
}
class StatusDTO {
  + getStatus(): String
  + setStatus(String): void
  + toString(): String
}
enum StatusName << enumeration >> {
  + values(): StatusName[]
  + valueOf(String): StatusName
}
class TokenController {
  + getAllUsers(): List<Customer>
}
class UserProfileController {
  + getAllUsers(): List<Customer>
  + changeOfferStatus(HttpServletRequest, Long, StatusDTO): MessageDTO
  + getOffer(HttpServletRequest, Long): OfferDTO
  + getOffersByStatus(HttpServletRequest, StatusDTO): List<OfferDTO>
  + handleEmptyInputException(EmptyEnterException): ExceptionDTO
  + handleNoAthorityException(NoAuthorityException): ExceptionDTO
  + deleteMe(HttpServletRequest): String
  + handleWrongInputException(WrongInputException): ExceptionDTO
  + addFav(HttpServletRequest, Long): MessageDTO
  + findMyAds(HttpServletRequest): List<Ad>
  + getAdDetail(Long): Ad
  + findAds(Long, Long, Double, String): List<Ad>
  + createOffer(HttpServletRequest, IdDTO): OfferDTO
  + delFav(HttpServletRequest, Long): MessageDTO
  + complaint(HttpServletRequest, Long): String
  + showMyFav(HttpServletRequest): List<Ad>
  + allMyOffers(HttpServletRequest): List<OfferDTO>
  + createAd(HttpServletRequest, AdDTO): Ad
  + rankAd(Long, RankDTO): MessageDTO
  + handleNotFoundException(NotFoundException): ExceptionDTO
  + getUserDetail(Long): FullCustomerDTO
}
class UsernameDTO {
  + getName(): String
  + setName(String): void
  + toString(): String
}
class WebSecurityConfig {
  - corsConfigurationSource(): CorsConfigurationSource
  + passwordEncoder(): PasswordEncoder
  # configure(AuthenticationManagerBuilder): void
  # authenticationManager(): AuthenticationManager
  + configure(WebSecurity): void
  # configure(HttpSecurity): void
}
class WrongInputException

AdsServiceImpl                        -[#008200,dashed]-^  AdsService                           
AuthorizationController               -[#999900,dotted]-  RequestMapping                       
AuthorizationController               -[#999900,dotted]-  RestController                       
CustomerServiceImpl                   -[#008200,dashed]-^  CustomerService                      
OfferServiceImpl                      -[#008200,dashed]-^  OfferService                         
TokenController                       -[#999900,dotted]-  RestController                       
UserProfileController                 -[#999900,dotted]-  RequestMapping                       
UserProfileController                 -[#999900,dotted]-  RestController                       
@enduml
